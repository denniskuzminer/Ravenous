{"version":3,"sources":["logo.svg","components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","class","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleLocationChange","bind","handleSortByChange","handleTermChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","getSortByClass","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","res","json","jsonRes","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ae3dd1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <img src={this.props.business.imageSrc} alt=\"\" />\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n          </div>\r\n          <div class=\"Business-reviews\">\r\n            <h3>{this.props.business.category}</h3>\r\n            <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n            <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {this.props.businesses.map((business) => {\r\n          return <Business business={business} key={business.id} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { term: \"\", location: \"\", sortBy: \"best_match\" };\r\n    this.sortByOptions = {\r\n      \"Best Match\": \"best_match\",\r\n      \"Highest Rated\": \"rating\",\r\n      \"Most Reviewed\": \"review_count\",\r\n    };\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSortByChange = this.handleSortByChange.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    return this.state.sortBy == sortByOption ? \"active\" : \"\";\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({ sortBy: sortByOption });\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({ location: event.target.value });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    this.props.searchYelp(\r\n      this.state.term,\r\n      this.state.location,\r\n      this.state.sortBy\r\n    );\r\n    event.preventDefault();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li\r\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n          className={this.getSortByClass(sortByOptionValue)}\r\n          key={sortByOptionValue}\r\n        >\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            onChange={this.handleTermChange}\r\n            placeholder=\"Search Businesses\"\r\n          />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey =\r\n  \"8otikmd1C4Tq7lg2Bi8nf1xaeSPM1H8oqac4J5EUAT_3-ZeX0ICliX_6hWZLJYET_ZYNIoMN5RukRicvrmo4KNI_RVwEyYqNcJ_JGpPyqusGqq_pHTnIMByRg3xvX3Yx\";\r\n\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      { headers: { Authorization: `Bearer ${apiKey}` } }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((jsonRes) => {\r\n        if (jsonRes.businesses) {\r\n          return jsonRes.businesses.map((business) => ({\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count,\r\n          }));\r\n        }\r\n      });\r\n  },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\nimport logo from \"C:/Users/denni/Comp Sci/VS Code Projects/Ravenous/ravenous/src/logo.svg\";\nimport \"./App.css\";\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from \"../../util/Yelp\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { businesses: [] };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}